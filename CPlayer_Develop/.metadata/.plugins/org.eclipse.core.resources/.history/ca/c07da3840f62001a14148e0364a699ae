package com.stackroute.favouriteservice.services;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;
import org.springframework.util.ObjectUtils;

import com.stackroute.favouriteservice.dto.UserFavouritePlayerDTO;
import com.stackroute.favouriteservice.entity.UserFavouritePlayerEntity;
import com.stackroute.favouriteservice.repositories.UserFavouritePlayersRepository;

@Service
public class UserFavouritePlayersService {

	@Autowired
	private UserFavouritePlayersRepository userFavouritePlayersRepository;
	List<UserFavouritePlayerEntity> updatedFavouriteList = new ArrayList<>();

	public List<UserFavouritePlayerEntity> addFavouritePlayersToList(UserFavouritePlayerDTO userFavouritePlayerDTO) {
		UserFavouritePlayerEntity userFavouritePlayerEntity = new UserFavouritePlayerEntity(
				userFavouritePlayerDTO.getId(), userFavouritePlayerDTO.getPid());

		List<UserFavouritePlayerEntity> savedUserFavoritePlayersList = userFavouritePlayersRepository
				.findAllById(userFavouritePlayerDTO.getId());
		if (CollectionUtils.isEmpty(savedUserFavoritePlayersList)) {
			updatedFavouriteList.add(userFavouritePlayerEntity);
		} else {
			savedUserFavoritePlayersList.add(userFavouritePlayerEntity);
			updatedFavouriteList.addAll(savedUserFavoritePlayersList);
		}
		return (List<UserFavouritePlayerEntity>) userFavouritePlayersRepository.saveAll(updatedFavouriteList);
	}

	public UserFavouritePlayerEntity deleteFavouritePlayersToList(UserFavouritePlayerDTO userFavouritePlayerDTO) {
		UserFavouritePlayerEntity userFavouriteToDelete = userFavouritePlayersRepository
				.findByIdAndPid(userFavouritePlayerDTO.getId(), userFavouritePlayerDTO.getPid());
		if (ObjectUtils.isEmpty(userFavouriteToDelete)) {
			return null;
		} else {
			userFavouritePlayersRepository.delete(userFavouriteToDelete);
			return userFavouriteToDelete;
		}
	}

	public List<UserFavouritePlayerEntity> updateFavouritePlayersToList(UserFavouritePlayerDTO userFavouritePlayerDTO) {

		UserFavouritePlayerEntity userFavouriteToUpdate = userFavouritePlayersRepository
				.findByIdAndPid(userFavouritePlayerDTO.getId(), userFavouritePlayerDTO.getPid());
		if (ObjectUtils.isEmpty(userFavouriteToUpdate)) {
			return null;
		} else {
//			UserFavouritePlayerEntity userFavouritePlayerEntity = new UserFavouritePlayerEntity(
//					userFavouritePlayerDTO.getId(), userFavouritePlayerDTO.getPid());
			userFavouriteToUpdate.setId(userFavouritePlayerDTO.getId());
			userFavouriteToUpdate.setPid(userFavouritePlayerDTO.getPid());
			userFavouritePlayersRepository.(userFavouriteToUpdate);
			return userFavouriteToDelete;
		}
		return (List<UserFavouritePlayerEntity>) userFavouritePlayersRepository.saveAll(updatedFavouriteList);
	}

}
