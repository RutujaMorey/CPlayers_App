package com.stackroute.userservice.controllers;

import java.util.Objects;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.stackroute.userservice.dto.AuthenticatedUserResponse;
import com.stackroute.userservice.dto.UserDTO;
import com.stackroute.userservice.entity.AuthenticatedUser;
import com.stackroute.userservice.services.CplayersUserDetailsService;
import com.stackroute.userservice.services.TokenGeneratorUtil;

@RequestMapping("/user")
@RestController
public class AuthenticateUserController {
	
	@Autowired
	private AuthenticationManager authenticationManager;

	@Autowired
	private CplayersUserDetailsService cplayersUserDetailsService;
	
	@Autowired
	private TokenGeneratorUtil tokenGeneratorUtil;

	@PostMapping(value = "/login")
	public ResponseEntity<String> loginUser(@RequestBody UserDTO userDTO) {
		authenticate(userDTO.getUserName(), userDTO.getPassword());
		AuthenticatedUser authenticatedUser = cplayersUserDetailsService.loadUserByUsername(userDTO.getUserName());
		String token ="";
		return Objects.nonNull(authenticatedUser) ? new ResponseEntity<>(new AuthenticatedUserResponse(token), HttpStatus.OK)
				: new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
	}

	@PostMapping(value = "/signup")
	public ResponseEntity<?> saveUser(@RequestBody UserDTO userDTO) throws Exception {
		return ResponseEntity.ok(cplayersUserDetailsService.saveNewUser(userDTO));
	}

	private void authenticate(String username, String password) throws Exception {
		try {
			authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username, password));
		} catch (DisabledException e) {
			throw new Exception("USER_DISABLED", e);
		} catch (BadCredentialsException e) {
			throw new Exception("INVALID_CREDENTIALS", e);
		}
	}

}
